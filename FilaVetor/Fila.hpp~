/*
    2     Copyright 2016 Gustavo Borges
    3 */
    4 template <typename T>
    5 #define FILA 100
    6 
    7 //! Classe de fila com vetor.
    8 /*!
    9  * A classe fila é a implementação de uma fila com vetor, dentro dela existem os
   10  * métodos de incluir elemento na fila, retirar um elemento da fila, retornar o
   11  * ultimo elemento da fila, em qual posição esse elemento está, verificar se a
   12  * fila está cheia ou vazia etc.
   13  */
   14 class Fila {
   15  private:
   16     T* m_dados; /*!<Ponteiro que vai receber os elementos da fila*/
   17     int ult; /*!<Inteiro que vai indicar a posição do ultimo elemento*/
   18     int TAMANHOFILA; /*!<Inteiro para indicar o tamanho da fila*/
   19 
   20  public:
   21     //! Construtor da fila com tamanho definido na constante
   22     /*!
   23      * Esse construtor inicializa a fila com tamanho que foi definido(a constante),
   24      * e seta o atributo que indica a posição do ultimo elemento para -1
   25     */
   26 	Fila() {
   27 	    TAMANHOFILA = FILA;
   28 	    m_dados = new T[TAMANHOFILA];
   29 	    ult = -1;
   30 	}
   31     //! Construtor da fila com tamanho passado como parâmetro
   32     /*!
   33      * A única diferença entre esse construtor é que o tamanho da fila nesse constr-
   34      * utor é passado como um parâmetro, o resto é igual.
   35     */
   36 	Fila<T>(int tam) {
   37 	    TAMANHOFILA = tam;
   38 	    m_dados = new T[TAMANHOFILA];
   39 	    ult = -1;
   40 	}
   41     //! Método para adicionar elementos na fila
   42     /*!
   43      * O método de incluir elementos na fila incrementa o indicador de posição do
   44      * último elemento e adiciona um elemento nessa posição, assim esse elemento
   45      * passa a se tornar o ultimo elemento da fila, e essa inclusão só ocorre se a
   46      * fila não estiver cheia.
   47     */
   48 	void inclui(T dado) {
   49 	    if (filaCheia()) {
   50 	        throw("Fila cheia, não é possivel adicionar mais elementos");
   51 	    } else {
   52 	        ult = ult + 1;
   53 	        m_dados[ult] = dado;
   54 	    }
   55 	}
   56     //! Método para retirar elementos da fila
   57     /*! 
   58      * O método retira caso a fila esteja vazia joga uma exceção, caso não esteja
   59      * tira o elemento que está na posição 0 da fila o coloca em uma variavel aux
   60      * e com um laço "joga" os elementos para frente e a posição do ultimo elemento
   61      * é decrementada, já que com a "jogada" de elementos para frente o ultimo
   62      * elemento também foi pra frente.
   63     */
   64 	T retira() {
   65 	    T aux = m_dados[0]; /*!<Atributo auxiliar para segurar o dado na pos 0*/
   66 	    if (filaVazia()) {
   67 	        throw("Fila vazia, não é possivel retirar nenhum elemento");
   68 	    } else {
   69 	        aux = m_dados[0];
   70 	        for (int i = 0; i < ult; i++) {
   71 	            m_dados[i] = m_dados[(i+1)];
   72 	        }
   73 	        m_dados[ult] = 0;
   74 	        ult--;
   75 	        return aux;
   76 	    }
   77 	}
   78     //! Método de retornar o ultimo elemento da fila
   79     /*!
   80      * Esse método simplesmente retorna o elemento de m_dados que se encontra na
   81      * ultima posição da fila, isso caso a fila não esteja vazia, se ela tiver é
   82      * jogada uma exceção.
   83     */
   84 	T ultimo() {
   85 	    if (filaVazia()) {
   86 	        throw("essa fila ta vazia como eu vo retorna o ultimo?");
   87 	    } else {
   88 	        return m_dados[ult];
   89 	    }
   90 	}
   91 	//! Método para retornar a posição do ultimo elemento
   92 	/*!
   93 	 * O método getUltimo simplesmente retorna a posição em que o está o ultimo
   94 	 * elemento.
   95 	*/
   96 	int getUltimo() {
   97 	   return ult;
   98 	}
   99 	//! Método de verificar se a fila está cheia
  100 	/*!
  101 	 * O método filaCheia verifica se a fila está cheia, retornando true caso
  102 	 * esteja e false caso não.
  103 	*/
  104 	bool filaCheia() {
  105 	    return(ult == TAMANHOFILA - 1);
  106 	}
  107 	//! Método para verificar se a fila está vazia
  108 	/*!
  109 	 * Já o método filaVazia verifica se a fila está vazia, retornando true caso
  110 	 * sim e false caso contrário.
  111 	*/
  112 	bool filaVazia() {
  113 	    return(ult == -1);
  114 	}
  115 	//! Método para "zerar" a fila
  116 	/*! 
  117 	 * Esse método seta o valor do atributo que indica a posição do ultimo para
  118 	 * 0, dessa forma "resetando" a fila.
  119 	*/
  120 	void inicializaFila() {
  121 	    ult = -1;
  122 	}
  123 };
  124 
  125 
